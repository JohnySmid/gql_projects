PROJECTS (2 studenti) Šmíd, Špáník
   ✓ Entity (ProjectGQLModel, ProjectTypeGQLModel, ProjectCategoryGQLModel)
    
   ✓ Entity (FinanceGQLModel, FinanceTypeGQLModel, FinanceCategoryGQLModel)
    
   ✓ rozšiřte datové struktury (tabulky) o možnost ukládat výkazy práce (výkaz práce je pole entit s počátkem a koncem činnosti a stručným popisem – EventGQLModel?) a zápisy ze schůzek (ContentGQLModel), uvažte využití EVENTS, PRESENCES
    (spojit s events nový model N:M) start co se stalo? (Na konzultaci byl vytvořen model, který se schválil)
   
   ✓ Modely v databázi pomocí SQLAlchemy, API endpoint typu GraphQL s pomocí knihovny Strawberry.
    
   ✓ Přístup k databázi řešte důsledně přes AioDataloder, resp. (https://github.com/hrbolek/uoishelpers/blob/main/uoishelpers/dataloaders.py).

   ✓ bezpečte kompletní CRUD operace nad entitami
    
   ✓ UD operace jako návratový typ nejméně se třemi prvky id, msg a „entityresult“ (pojmenujte adekvátně podle dotčené entity), vhodné přidat možnost nadřízené entity, speciálně pro operaci D.
    
   ✓ Řešte autorizaci operací (permission classes).
    
   ✓ Kompletní CRUD dotazy na GQL v souboru externalids_queries.json (dictionary), jméno klíče nechť vhodně identifikuje operaci, hodnota je dictionary s klíči query (obsahuje parametrický dotaz) nebo mutation (obsahuje parametrické mutation) a variables (obsahuje dictionary jako testovací hodnoty).
    
   ✓ Kompletní popisy API v kódu (description u GQLModelů) a popisy DB vrstvy (comment u DBModelů).
    
   ✓ Zabezpečte více jak 90% code test coverage (standard pytest).





TODO:
✓ funguje -> udelat test, ktery udela introspection query - udelat to jako jednoduchy test (https://gist.github.com/craigbeck/b90915d49fda19d5b2b17ead14dcd6da) 
✓ -> udelat docker build (jako u uois githubu, email druhy odkaz) | https://github.com/hrbolek/_uois/blob/v2.1/frontend/Dockerfile
-> run dociql primo v dockerfile (jako je v dociql v kodu ://file) | 17 radek: https://github.com/wayfair/dociql/blob/master/app/dociql/fetch-schema.js
-> udelat static build (zase dockerfile uois Last phase) | zkopiruje z "virtualniho node" do python prostredi (co to ma byt nevim ^^ )
-> v mainu tahle fce (https://github.com/hrbolek/_uois/blob/v2.1/frontend/pyserver/app.py):
                      # uois github
                      # @app.get("/ui/{file_path:path}")
                      # async def read_file(file_path: str):
                      #     print(file_path)
                      #     if os.path.isfile(f"./js/{file_path}"):
                      #         return FileResponse(f"./js/{file_path}")
                      #     else:
                      #         return FileResponse(f"./js/index.html")